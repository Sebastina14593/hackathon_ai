from django.db import models
from django.contrib.auth.models import User

# Создаем модель для опций множественного выбора
class MultiChoiceOption(models.Model):
    option = models.CharField(max_length=200, verbose_name="Опция")

    def __str__(self):
        return self.option

    class Meta:
        verbose_name = 'Опция выбора'
        verbose_name_plural = 'Опции выбора'
# Create your models here.
class Chat(models.Model):
    # ID бращения (для email оно будет одно, для телеграма может повторяться)
    chat_number = models.PositiveIntegerField('ID обращения', default=0)
    # email пользователя
    user_email = models.EmailField("Укажите электронный адрес, по которому мы могли бы связаться для уточнения проблемы:",
                                    max_length=100)
    # проблема пользователя (поле с выбором ответа)
    PROBLEM_CHOICES = [
        ('Воспроизведение ролика не началось, показалась заглушка', 'Воспроизведение ролика не началось, показалась заглушка'),
        ('Воспроизведение ролика не началось, видео встало на бесконечную загрузку', 'Воспроизведение ролика не началось, видео встало на бесконечную загрузку'),
        ('Видео воспроизводится рывками, постоянно встает на загрузку', 'Видео воспроизводится рывками, постоянно встает на загрузку'),
        ('Видео перестало воспроизводиться, показалась заглушка', 'Видео перестало воспроизводиться, показалась заглушка'),
        ('Воспроизведение ролика остановилось, видео встало на бесконечную загрузку', 'Воспроизведение ролика остановилось, видео встало на бесконечную загрузку'),
        ('Выдается сообщение о блокировщике рекламы, но он не установлен на моем устройстве', 'Выдается сообщение о блокировщике рекламы, но он не установлен на моем устройстве'),
        ('Другое', 'Другое'),
    ]
    problem_description = models.CharField(
        max_length=200,
        choices=PROBLEM_CHOICES,
        verbose_name="Как можно описать возникшую проблему:"
    )
    # Текстовое поле для дополнительного описания проблемы (textarea)
    detailed_description = models.TextField(verbose_name="Ваше описание проблемы, дополнительная информация:")

    # Поле с множественным выбором (предположим, что это различные дополнительные опции или шаги)
    MULTI_CHOICES = [
        ('Проблема воспроизвелась однократно и больше не повторяется', 'Проблема воспроизвелась однократно и больше не повторяется'),
        ('Проблема воспроизводится в другом браузере', 'Проблема воспроизводится в другом браузере'),
        ('Вы используете программное обеспечение для блокировки нежелательной рекламы', 'Вы используете программное обеспечение для блокировки нежелательной рекламы'),
        ('Вы используете  антивирус', 'Вы используете  антивирус'),
        ('Вы подключены к сети через прокси-сервер', 'Вы подключены к сети через прокси-сервер'),
    ]
    multiple_choice = models.ManyToManyField(MultiChoiceOption,
                                             verbose_name="Укажите утверждения, подходящие к описываемой проблеме:")

    # сотрудник, который взял обращение в работу
    # emp = models.ForeignKey(User, on_delete=models.CASCADE, blank=True)
    # ответ гигачата
    response_giga = models.TextField(blank=True, verbose_name="Подсказка-ответ от гигачата")
    # ответ сотрудника
    response_emp = models.TextField(blank=True, verbose_name="Ответ сотрудника")
    # время создания обращения
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Время создания обращения")
    # время изменения обращения
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Время изменения обращения")
    # статус обращения
    chat_status = models.PositiveIntegerField('Статус обращения', default=1) # 1 - не начато, 2 - в работе, 3 - закрыто

    # def __str__(self):
    #     return f'{self.id}: {self.user_email}'

    class Meta:
        verbose_name = 'Обращение'
        verbose_name_plural = 'Обращения'
